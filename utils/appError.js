class AppError extends Error{
    constructor(message,statusCode){  
      super(message);
      this.statusCode = statusCode;
      /**
       * see if the status code starts with 4xx
       * any status code starts with 4xx mean this
       * The client has made something wrong at the request
       * and the server won't or can't handel it
       */
      this.status = `${this.statusCode}`.startsWith('4') ? 'fail' : 'error';

      /**
       * it's aproperty is always true
       * it means all errors dreived from this class
       * will be operational erros
       * because there is non operational ons 
       * which might be generated by a third party lib
       * so we can recognize it
       */
      this.isOperational = true;
      /**
       * StackTrace in general is a way for tracking the erros
       * in such a way of stack working
       * it has some main points
       *    - name of function which arrise this error
       *    - file path where the error occured
       *    - line where the error occured
       *    - column where the error occured
       *
       * captureStackTrace is used to exclude
       * some errors from the stackTrace
       * Parameters:
       * - `this`: Represents the context in which the stack trace is captured.
       * - `this.constructor`: Specifies the function to exclude from the stack trace.
       */
      Error.captureStackTrace(this, this.constructor);
    }
}

module.exports = AppError;